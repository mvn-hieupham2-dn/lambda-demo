import { StatusCodes } from 'http-status-codes'
import * as log from 'loglevel'
import { AppDataSource } from 'models/index'
import { CustomError } from 'shared/utils/custom_error'
import { render } from 'shared/utils/custom_response'
import { IterateNum, TypeResponse } from './custom_type'

const loadMiddleware = ([currentMiddleware, ...others]: IterateNum, handler: Function) => {
  if (currentMiddleware) {
    return (e, c) => {
      return currentMiddleware(e, c, loadMiddleware(others, handler))
    }
  }

  return handler
}
export const loadHandlerWithMiddleware = (handle: Function, middlewares = []) => async (e, c):Promise<TypeResponse> => {
  try {
    if (!e.db) {
      try {
        e.db = await AppDataSource.initialize()
      } catch (error) {
        log.error(error.message)
        throw new CustomError('Fail to connect DB', {}, StatusCodes.NOT_IMPLEMENTED)
      }
    }
    const customMiddleware = [
      ...middlewares
    ]
    const newHandle = await loadMiddleware(customMiddleware, handle)(e, c)
    return newHandle
  } catch (error) {
    return render(error.code, { error_message: error.message }, {})
  }
}
